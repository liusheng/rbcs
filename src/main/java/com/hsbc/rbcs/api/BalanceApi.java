/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hsbc.rbcs.api;

import com.hsbc.rbcs.model.AccountBalance;
import com.hsbc.rbcs.model.HealthCheck200Response;
import com.hsbc.rbcs.model.TransactionRequest;
import com.hsbc.rbcs.model.TransactionResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-29T11:31:37.558517800+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "balance", description = "the balance API")
public interface BalanceApi {

    default BalanceApiDelegate getDelegate() {
        return new BalanceApiDelegate() {};
    }

    /**
     * POST /balance/v1/transaction : Financial transaction between two accounts
     *
     * @param transactionRequest  (required)
     * @return Financial transaction successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Service exception (status code 500)
     */
    @Operation(
        operationId = "balanceTransaction",
        summary = "Financial transaction between two accounts",
        tags = { "BalanceApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Financial transaction successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "500", description = "Service exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/balance/v1/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TransactionResponse> balanceTransaction(
        @Parameter(name = "TransactionRequest", description = "", required = true) @Valid @RequestBody TransactionRequest transactionRequest
    ) {
        return getDelegate().balanceTransaction(transactionRequest);
    }


    /**
     * GET /balance/v1/health : health check for balance service
     *
     * @return health check for balance service successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Service exception (status code 500)
     */
    @Operation(
        operationId = "healthCheck",
        summary = "health check for balance service",
        tags = { "BalanceApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "health check for balance service successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheck200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "500", description = "Service exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/balance/v1/health",
        produces = { "application/json" }
    )
    default ResponseEntity<HealthCheck200Response> healthCheck(
        
    ) {
        return getDelegate().healthCheck();
    }


    /**
     * POST /balance/v1/init-account : This interface is used to init account data for testing
     *
     * @param accountBalance  (required)
     * @return This interface is used to init account data for testing (status code 200)
     *         or Invalid input (status code 400)
     *         or Service exception (status code 500)
     */
    @Operation(
        operationId = "initBalance",
        summary = "This interface is used to init account data for testing",
        tags = { "BalanceApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "This interface is used to init account data for testing", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountBalance.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "500", description = "Service exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/balance/v1/init-account",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountBalance> initBalance(
        @Parameter(name = "AccountBalance", description = "", required = true) @Valid @RequestBody AccountBalance accountBalance
    ) {
        return getDelegate().initBalance(accountBalance);
    }


    /**
     * GET /balance/v1/query-account : Query financial by account
     *
     * @param account account (required)
     * @return Query financial by account successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Service exception (status code 500)
     */
    @Operation(
        operationId = "queryBalance",
        summary = "Query financial by account",
        tags = { "BalanceApi" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Query financial by account successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountBalance.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "500", description = "Service exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/balance/v1/query-account",
        produces = { "application/json" }
    )
    default ResponseEntity<AccountBalance> queryBalance(
        @NotNull @Parameter(name = "account", description = "account", required = true) @Valid @RequestParam(value = "account", required = true) String account
    ) {
        return getDelegate().queryBalance(account);
    }

}
